// <auto-generated />
using System;
using DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(DbCalls))]
    partial class DbCallsModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Models.PostImage", b =>
                {
                    b.Property<int>("PostImageID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PostID");

                    b.Property<string>("imagePath");

                    b.HasKey("PostImageID");

                    b.HasIndex("PostID");

                    b.ToTable("PostImage");
                });

            modelBuilder.Entity("DAL.Models.SharePost", b =>
                {
                    b.Property<long>("SharePostID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PostID");

                    b.Property<long>("UserID");

                    b.Property<DateTime>("shareTime");

                    b.Property<string>("text");

                    b.Property<DateTime>("updateTime");

                    b.HasKey("SharePostID");

                    b.HasIndex("PostID");

                    b.ToTable("SharePost");
                });

            modelBuilder.Entity("NewSocial.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PostID");

                    b.Property<long>("UserID");

                    b.Property<string>("commentText");

                    b.Property<DateTime>("commentTime");

                    b.HasKey("CommentID");

                    b.HasIndex("PostID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("NewSocial.Models.Friend", b =>
                {
                    b.Property<long>("FriendID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserID1");

                    b.Property<long>("UserID2");

                    b.HasKey("FriendID");

                    b.ToTable("Friend");
                });

            modelBuilder.Entity("NewSocial.Models.FriendRequest", b =>
                {
                    b.Property<long>("FriendRequestID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("fromReq");

                    b.Property<long>("toReq");

                    b.HasKey("FriendRequestID");

                    b.ToTable("FriendRequest");
                });

            modelBuilder.Entity("NewSocial.Models.Post", b =>
                {
                    b.Property<long>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("UserID");

                    b.Property<string>("imageURL");

                    b.Property<DateTime>("postTime");

                    b.Property<string>("text");

                    b.Property<DateTime>("updateTime");

                    b.Property<byte[]>("video");

                    b.HasKey("PostID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("NewSocial.Models.Reaction", b =>
                {
                    b.Property<int>("ReactionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PostID");

                    b.Property<long>("UserID");

                    b.Property<DateTime>("reactionTime");

                    b.Property<int>("reactionType");

                    b.HasKey("ReactionID");

                    b.HasIndex("PostID");

                    b.ToTable("Reaction");
                });

            modelBuilder.Entity("NewSocial.Models.SubReaction", b =>
                {
                    b.Property<int>("SubReactionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentID");

                    b.Property<long>("UserID");

                    b.Property<DateTime>("reactionTime");

                    b.Property<int>("reactionType");

                    b.HasKey("SubReactionID");

                    b.HasIndex("CommentID");

                    b.ToTable("SubReaction");
                });

            modelBuilder.Entity("NewSocial.Models.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("city");

                    b.Property<string>("country");

                    b.Property<DateTime>("dateOfBirth");

                    b.Property<string>("email");

                    b.Property<int>("gender");

                    b.Property<bool>("isVerified");

                    b.Property<string>("name");

                    b.Property<string>("password");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("NewSocial.Models.UserMedia", b =>
                {
                    b.Property<long>("UserMediaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<long>("UserID");

                    b.Property<int>("type");

                    b.HasKey("UserMediaID");

                    b.ToTable("UserMedia");
                });

            modelBuilder.Entity("DAL.Models.PostImage", b =>
                {
                    b.HasOne("NewSocial.Models.Post", "post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Models.SharePost", b =>
                {
                    b.HasOne("NewSocial.Models.Post", "post")
                        .WithMany("SharePosts")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewSocial.Models.Comment", b =>
                {
                    b.HasOne("NewSocial.Models.Post", "post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewSocial.Models.Reaction", b =>
                {
                    b.HasOne("NewSocial.Models.Post", "post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NewSocial.Models.SubReaction", b =>
                {
                    b.HasOne("NewSocial.Models.Comment", "comment")
                        .WithMany("SubReactions")
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
